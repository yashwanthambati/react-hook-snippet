{
	"useState": {
		"prefix": "ust",
		"body": [
		  "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)$0"
		],
		"description": "React useState() hook"

},
"useEffect": {
	"prefix": "uef",
	"body": [
		"useEffect(() => {",
			"\n\t ",
			"\t$1",
			"\n\treturn cleanUp = () => {",
				"\t ",
				"\t\t$2",
			"\t}",
		
		"});$0"
    ],
    "description": "React useEffect() hook"
},
"useContext": {
	"prefix": "uct",
	"body": [
		"const $1 = useContext($2)$0"
    ],
    "description": "React useContext() hook"
},
"useCallback": {
	"prefix": "ucb",
	"body": [
		"const ${1:memoizedCallback} = useCallback(",
			"\t() => {",
				"\t\t${2:doSomething}(${3:a}, ${4:b})",
			"\t},",
			"\t[${5:a}, ${6:b}],",
		")$0"
    ],
    "description": "React useCallback() hook"
},
"useMemo": {
	"prefix": "umo",
	"body": [
		"const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
    ],
    "description": "React useMemo() hook"
},
"useRef": {
	"prefix": "urf",
	"body": [
		"const $1 = useRef($2)$0"
    ],
    "description": "React useRef() hook"
},
"useReducer": {
    "prefix": "urd",
    "body": [
        "const [${1:state},${2: dispatch}] = useReducer(state, action);", 
            
            "\n\treturn (",
            "\t\t",
            "\t);"

        ],
        "description": "React useReducer() hook"
},
"Import React, { useState }": {
    "prefix": "imrus",
    "body": ["import React, { useState } from 'react';"],
    "description": "Import React, { useState }"
  },
  "Import React, { useEffect }": {
    "prefix": "imret",
    "body": ["import React, { useEffect } from 'react';"],
    "description": "Import React, { useEffect }"
  },
  "Import React, { useContext }": {
    "prefix": "imrct",
    "body": ["import React, { useContext } from 'react';"],
    "description": "Import React, { useContext }"
  }
}
